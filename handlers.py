from asyncio import sleep
from states import NewItem
from database import Item, User
from aiogram import types
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery)
import database
import re
from load_all import dp, bot
from config import channel, admin_group

db = database.DBCommands()

markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy"),
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sales_1")
        ],
        [
            InlineKeyboardButton(text="üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
            InlineKeyboardButton(text="‚ùó –ü—Ä–∞–≤–∏–ª–∞", callback_data="regulations")
        ],
        [
            InlineKeyboardButton(text="üîç –õ–µ–≥–∏—Ç—á–µ–∫", callback_data="legitcheck"),
            InlineKeyboardButton(text="üíØ –ì–∞—Ä–∞–Ω—Ç", callback_data="garant")
        ],
        [
            InlineKeyboardButton(text="‚úå –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
            InlineKeyboardButton(text="üíµ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
        ]

    ]
)
user_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy"),
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sales_1")
        ],
        [
            InlineKeyboardButton(text="üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction"),
            InlineKeyboardButton(text="‚ùó –ü—Ä–∞–≤–∏–ª–∞", callback_data="regulations")
        ],
        [
            InlineKeyboardButton(text="üîç –õ–µ–≥–∏—Ç—á–µ–∫", callback_data="legitcheck"),
            InlineKeyboardButton(text="üíØ –ì–∞—Ä–∞–Ω—Ç", callback_data="garant")
        ],
        [
            InlineKeyboardButton(text="‚úå –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
            InlineKeyboardButton(text="üíµ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
        ],
        [InlineKeyboardButton(text="üîê –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="cabinet")]
    ]
)

cabinet_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="üìà –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="items_history")
        ],
        [
            InlineKeyboardButton(text="‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
        ]
    ]
)
cancel_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="üîô –®–∞–≥ –Ω–∞–∑–∞–¥", callback_data="back_step")
        ],
        [
            InlineKeyboardButton(text="‚≠ï –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
)
next_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="price")
        ]
    ]
)
confirm_photo_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="change")
        ]
    ]
)
home_markup = InlineKeyboardMarkup(
    inline_keyboard=
    [
        [
            InlineKeyboardButton(text="‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
        ]
    ]
)

__delete__ = CallbackData('delete', 'deal_id')

# /start
@dp.message_handler(CommandStart())
async def start(message: types.Message):
    user = await db.get_user(message.from_user.id)
    if user is not None:
        await bot.send_photo(message.from_user.id,
                             "AgACAgIAAxkBAAMqXqWZKY6e8kC5Zd_sDY99woyxGlAAAmCtMRtUoDFJKMQyAAH3FazfqkyAkS4AAwEAAwIAA3gAA02FAgABGQQ",
                             reply_markup=user_markup)
    else:
        await bot.send_photo(message.from_user.id,
                             "AgACAgIAAxkBAAMqXqWZKY6e8kC5Zd_sDY99woyxGlAAAmCtMRtUoDFJKMQyAAH3FazfqkyAkS4AAwEAAwIAA3gAA02FAgABGQQ",
                             reply_markup=markup)

@dp.callback_query_handler(text_contains="cabinet")
async def cabinet(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    username = call.from_user.username
    user_id = call.from_user.id
    approval = await db.count_items(str(user_id), True)
    in_process = await db.count_items(str(user_id), False)
    text = ("–ü—Ä–∏–≤–µ—Ç, {username}\n"
            "–í–∞—à–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
            "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: <b>{approval}</b> –∑–∞–ø–∏—Å–µ–π\n"
            "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: <b>{in_process}</b> –∑–∞–ø–∏—Å–µ–π\n").\
        format(approval=approval, in_process=in_process, username=username)
    if approval == 0:
        await call.message.answer(text, reply_markup=home_markup)
    else:
        await call.message.answer(text, reply_markup=cabinet_markup)


# —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
@dp.callback_query_handler(text_contains="items_history")
async def user_deals_history(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=home_markup)
    all_items = await db.show_items(str(call.from_user.id))
    for num, item in enumerate(all_items):
        text = ("<b>id:{deal_id}</b> \t|\t <u>{brand}</u>\n"
                "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> \t{title}\n"
                "<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> \t{status}\n"
                "<b>–†–∞–∑–º–µ—Ä:</b> \t{size}\n"
                "<b>–ì–æ—Ä–æ–¥:</b> \t{city}\n"
                "<b>–ú–µ—Å—Ç–æ:</b> \t{place}\n"
                "<b>–¶–µ–Ω–∞:</b> \t<b>{price}</b>\n").format(
            deal_id=item.deal_id,
            brand=item.brand,
            title=item.title,
            status=item.status,
            size=item.size,
            city=item.city,
            place=item.place,
            price=item.price
        )
        markup = InlineKeyboardMarkup(
            inline_keyboard=
            [
                [
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=__delete__.new(deal_id=item.deal_id))
                ]
            ]
        )
        await call.message.answer(text, reply_markup=markup)
        await sleep(0.3)


# —Ñ–∏–ª—å—Ç—Ä –∫–æ–ª–ª–±–µ–∫–æ–≤
@dp.callback_query_handler(__delete__.filter())
async def delete_item(call: CallbackQuery, callback_data: dict):
    await call.message.edit_reply_markup()

    deal_id = callback_data.get('deal_id')
    await db.delete_item(deal_id)
    await delete_message(deal_id)
    text = "<b>–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è {deal_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n".format(deal_id=callback_data.get('deal_id'))
    callback_data.clear()
    await call.message.answer(text, reply_markup=home_markup)


@dp.callback_query_handler(text_contains="home")
async def back(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    user = await db.get_user(call.from_user.id)
    if user is not None:
        await bot.send_photo(call.from_user.id,
                             "AgACAgIAAxkBAAMqXqWZKY6e8kC5Zd_sDY99woyxGlAAAmCtMRtUoDFJKMQyAAH3FazfqkyAkS4AAwEAAwIAA3gAA02FAgABGQQ",
                             reply_markup=user_markup)
    else:
        await bot.send_photo(call.from_user.id,
                             "AgACAgIAAxkBAAMqXqWZKY6e8kC5Zd_sDY99woyxGlAAAmCtMRtUoDFJKMQyAAH3FazfqkyAkS4AAwEAAwIAA3gAA02FAgABGQQ",
                             reply_markup=markup)


@dp.callback_query_handler(text_contains="buy")
async def buy(call: CallbackQuery):
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="–í–µ—â–∏ –≤ –Ω–∞–ª–∏—á–∏–∏", url="https://t.me/legitplace_stock")
            ],
            [
                InlineKeyboardButton(text="–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", url="https://t.me/legitplacemarket")
            ],
            [
                InlineKeyboardButton(text="Legitplace Instagram", url="https://www.instagram.com/legitplace")
            ],
            [
                InlineKeyboardButton(text="‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
            ],
        ]
    )
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "üß¢ –í–µ—â–∏ –≤ –Ω–∞–ª–∏—á–∏–∏:\n@legitplace_stock\n\nüëï –ö—É–ø–∏—Ç—å –≤–µ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n@legitplacemarket",
        reply_markup=markup)


@dp.callback_query_handler(text_contains="reviews")
async def reviews(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "‚úÖ–û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å –∏—â–∏—Ç–µ –≤ Instagram highlights.\nhttps://www.instagram.com/stories/highlights/18087466135048198"
        "/\nhttps://www.instagram.com/stories/highlights/18050389591005276/\nhttps://www.instagram.com/stories"
        "/highlights/18014711626004061/\nhttps://www.instagram.com/stories/highlights/17888980393173366/",
        reply_markup=home_markup)


@dp.callback_query_handler(text_contains="contacts")
async def contacts(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram –∏ "
        "Instagram.\n\nüì≠@timewasteog\nüì≠@buduvsegdal\n\nüì∏https://www.instagram.com/legitplace",
        reply_markup=home_markup)


@dp.callback_query_handler(text_contains="instruction")
async def instruction(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "https://telegra.ph/Rukovodstvo-po-polzovaniyu-i-zagruzke-foto-04-18",
        reply_markup=home_markup)


@dp.callback_query_handler(text_contains="regulations")
async def regulations(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "https://telegra.ph/Pravila-ploshchadki-04-20",
        reply_markup=home_markup)


@dp.callback_query_handler(text_contains="legitcheck")
async def legitcheck(call: CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer_photo(
        "AgACAgIAAxkBAAMtXqWZbsLUabpfMGcOv2FFAvGg6KQAAmmtMRuIDDFJc6AglAjWY2KjZcsOAAQBAAMCAAN4AAOa4QQAARkE",
        reply_markup=home_markup)


@dp.callback_query_handler(text_contains="garant")
async def garant(call: CallbackQuery):
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="üõ° –ù–∞–ø–∏—Å–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç—É", url="https://t.me/legitplace_garant")
            ],
            [
                InlineKeyboardButton(text="‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
            ]
        ]
    )
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer(
        "üíØ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≥–∞—Ä–∞–Ω—Ç–∞: @legitplace_garant\n\n–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ —á–∏—Ç–∞–π—Ç–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–∏–∂–µ.\n"
        "https://telegra.ph/Garant-servis-04-21",

        reply_markup=markup)


@dp.callback_query_handler(text_contains="cancel", state=NewItem)
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await state.reset_state()
    await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=home_markup)


@dp.callback_query_handler(text_contains="back_step", state=NewItem)
async def back_step(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    current_state = await state.get_state()
    if current_state == "NewItem:Brand":
        await bot.delete_message(call.message.chat.id, call.message.message_id)  # —Ä–∞–±–æ—á–∏–π –∫–æ—Å—Ç—ã–ª—å
        await call.message.answer("<b>–®–∞–≥ 1 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏", reply_markup=cancel_markup)
        await NewItem.Title.set()

    elif current_state == "NewItem:Status":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 2 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –≤–µ—â–∏ —Å —Ö–µ—à—Ç–µ–≥–æ–º\n<i>–ü—Ä–∏–º–µ—Ä:#palace</i>",
                                  reply_markup=cancel_markup)
        await NewItem.Status.set()

    elif current_state == "NewItem:Size":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 3 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–∏ –æ—Ç 1 –¥–æ 10 (~9/10) –∏–ª–∏ –ù–æ–≤–∞—è –≤–µ—â—å",
                                  reply_markup=cancel_markup)
        await NewItem.Status.set()

    elif current_state == "NewItem:City":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 4 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–µ—â–∏ –æ—Ç XXS –¥–æ XXL", reply_markup=cancel_markup)
        await NewItem.Size.set()

    elif current_state == "NewItem:Place":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 5 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–µ—â—å",
                                  reply_markup=cancel_markup)
        await NewItem.City.set()

    elif current_state == "NewItem:Media":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 6 –∏–∑ 8</b>\n–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ (–≥–¥–µ?)/ –ø–æ—á—Ç–∞ (–∫–∞–∫–∞—è?)",
                                  reply_markup=cancel_markup)
        await NewItem.Place.set()

    elif current_state == "NewItem:Price":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer(
            "<b>–®–∞–≥ 7 –∏–∑ 8</b>\n–ü—Ä–∏ –ø–æ–º–æ—â–∏ —Å–∫—Ä–µ–ø–∫–∏ üìé –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ <b>2</b> –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            reply_markup=cancel_markup)
        await NewItem.Media.set()

    elif current_state == "NewItem:Confirm":
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer("<b>–®–∞–≥ 8 –∏–∑ 8</b>\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞", reply_markup=cancel_markup)
        await NewItem.Price.set()


@dp.callback_query_handler(text_contains="sales_1")
async def insctruction(call: CallbackQuery):
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="‚úè –ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="sell")
            ],
            [
                InlineKeyboardButton(text="‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")
            ]
        ]
    )
    await call.message.edit_reply_markup()
    await call.message.delete()
    await bot.send_photo(call.message.chat.id,
                             "AgACAgIAAxkBAAOLXqWePVAoJMYx6-75z_tJWbGqLu8AAmWtMRtUoDFJrSZ_Fw-I87WtX8sOAAQBAAMCAAN4AAPG4QQAARkE",
                             reply_markup=markup)


@dp.callback_query_handler(text_contains="sell")
async def add_new_item(call: CallbackQuery):
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="‚≠ï –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]
        ]
    )
    await call.message.edit_reply_markup()
    if call.from_user.username is None:
        await call.message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                                  "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.", reply_markup=home_markup)
        return
    await call.message.answer("<b>–®–∞–≥ 1 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏", reply_markup=markup)
    await NewItem.Title.set()


# 1 –•–µ–Ω–ª–¥–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message_handler(state=NewItem.Title)
async def enter_name(message: types.Message, state: FSMContext):
    title = message.text
    item = Item()
    item.title = title

    await message.answer("<b>–®–∞–≥ 2 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –≤–µ—â–∏ —Å —Ö–µ—à—Ç–µ–≥–æ–º\n<i>–ü—Ä–∏–º–µ—Ä:#palace</i>",
                         reply_markup=cancel_markup)
    await NewItem.Brand.set()
    await state.update_data(item=item)


# 2 –•–µ–Ω–ª–¥–µ—Ä –±—Ä–µ–Ω–¥–∞
@dp.message_handler(state=NewItem.Brand)
async def enter_brand(message: types.Message, state: FSMContext):
    brand = message.text
    if brand.startswith('#') is False:
        brand = ('#' + brand)

    data = await state.get_data()
    item: Item = data.get("item")
    item.brand = brand.lower()

    await message.answer("<b>–®–∞–≥ 3 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–∏ –æ—Ç 1 –¥–æ 10 (~9/10) "
                         "–∏–ª–∏ –ù–æ–≤–∞—è –≤–µ—â—å", reply_markup=cancel_markup)
    await NewItem.Status.set()
    await state.update_data(item=item)


# 3 –•–µ–Ω–ª–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=NewItem.Status)
async def enter_status(message: types.Message, state: FSMContext):
    status = message.text
    data = await state.get_data()
    item: Item = data.get("item")
    item.status = status

    await message.answer("<b>–®–∞–≥ 4 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–µ—â–∏ –æ—Ç XXS –¥–æ XXL", reply_markup=cancel_markup)
    await NewItem.Size.set()
    await state.update_data(item=item)


# 4 –•–µ–Ω–ª–¥–µ—Ä —Ä–∞–∑–º–µ—Ä–∞
@dp.message_handler(state=NewItem.Size)
async def enter_size(message: types.Message, state: FSMContext):
    size = message.text
    data = await state.get_data()
    item: Item = data.get("item")
    item.size = size

    await message.answer("<b>–®–∞–≥ 5 –∏–∑ 8</b>\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–µ—â—å", reply_markup=cancel_markup)
    await NewItem.City.set()
    await state.update_data(item=item)


# 5 –•–µ–Ω–ª–¥–µ—Ä –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=NewItem.City)
async def enter_city(message: types.Message, state: FSMContext):
    city = message.text
    data = await state.get_data()
    item: Item = data.get("item")
    item.city = city

    await message.answer("<b>–®–∞–≥ 6 –∏–∑ 8</b>\n–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ (–≥–¥–µ?)/ –ø–æ—á—Ç–∞ (–∫–∞–∫–∞—è?)", reply_markup=cancel_markup)
    await NewItem.Place.set()
    await state.update_data(item=item)


# 6 –•–µ–Ω–ª–¥–µ—Ä –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
@dp.message_handler(state=NewItem.Place)
async def enter_place(message: types.Message, state: FSMContext):
    place = message.text
    data = await state.get_data()
    item: Item = data.get("item")
    item.place = place

    await message.answer("<b>–®–∞–≥ 7 –∏–∑ 8</b>\n–ü—Ä–∏ –ø–æ–º–æ—â–∏ —Å–∫—Ä–µ–ø–∫–∏ üìé –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ <b>2</b> –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                         reply_markup=cancel_markup)
    await NewItem.Media.set()
    await state.update_data(item=item)


@dp.message_handler(state=NewItem.Media, content_types=types.ContentType.DOCUMENT)
async def print_error(message: types.Message):
    chat_id = message.from_user.id
    await bot.send_message(chat_id, "–û—à–∏–±–∫–∞, –í—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")


# 7 –•–µ–Ω–ª–¥–µ—Ä —Ñ–æ—Ç–æ
@dp.message_handler(state=NewItem.Media, content_types=types.ContentType.PHOTO)
async def enter_media(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    media_id = message.media_group_id
    data = await state.get_data()
    item: Item = data.get("item")
    if media_id is not None:
        item.media = media_id
        await state.update_data(item=item)

    await db.add_photo(media_id, photo_id)
    total_photo = 0
    total_photo = await db.count_photo_by_media_id(media_id)  # –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª-–≤–∞ —Ñ–æ—Ç–æ
    chat_id = message.from_user.id
    if total_photo >= 2:
        msg = await bot.send_message(chat_id,
                                     "–í—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ <b>{total_photo}</b> —Ñ–æ—Ç–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ".
                                     format(total_photo=total_photo), reply_markup=confirm_photo_markup)
        await bot.edit_message_text("temp", chat_id, msg.message_id - 1)
        await bot.delete_message(msg.chat.id, msg.message_id - 1)  # —Ä–∞–±–æ—á–∏–π –∫–æ—Å—Ç—ã–ª—å
        await NewItem.Confirm.set()
    else:
        msg = await bot.send_message(chat_id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º <b>2</b> —Ñ–æ—Ç–æ.")
        await bot.edit_message_text("temp", chat_id, msg.message_id - 1)
        await bot.delete_message(msg.chat.id, msg.message_id - 1)  # —Ä–∞–±–æ—á–∏–π –∫–æ—Å—Ç—ã–ª—å


# 8 –•–µ–Ω–ª–¥–µ—Ä —Ü–µ–Ω—ã
@dp.message_handler(state=NewItem.Price)
async def get_price(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", callback_data="confirm")],
            [InlineKeyboardButton(text="‚≠ï –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
    )

    data = await state.get_data()
    item: Item = data.get("item")
    price = message.text
    if price.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É <i>(USD, UAH, EUR)</i>\n"
                             "<b>–®–∞–≥ 7 –∏–∑ 7</b>\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, <i>–ø—Ä–∏–º–µ—Ä:666 USD</i>")
        return
    item.price = price
    item.deal_id = str(message.message_id)
    username = message.from_user.username
    await state.update_data(item=item)
    await message.answer_media_group(await create_media(state, username, None, message))
    await message.answer("–ì–æ—Ç–æ–≤–æ!\n", reply_markup=markup)
    await NewItem.Confirm.set()


@dp.callback_query_handler(text_contains="change", state=NewItem.Confirm)
async def enter_price(call: types.CallbackQuery):
    await call.message.edit_reply_markup()

    await call.message.answer("<b>–®–∞–≥ 8 –∏–∑ 8</b>\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    await NewItem.Price.set()


@dp.callback_query_handler(text_contains="confirm", state=NewItem.Confirm)
async def confirm(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    username = call.from_user.username
    user_id = call.from_user.id

    await db.add_new_user()

    data = await state.get_data()
    item: Item = data.get("item")
    item.user_id = str(user_id)
    await state.update_data(item=item)
    # await call.message.answer_media_group(await create_media(state, username, call, None))
    await call.bot.send_media_group(admin_group, await create_media(state, username, call, None))
    await call.message.answer("‚úÖ–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n"
                              "<b>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–π–¥–∏—Ç–µ –≤ ¬´–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç¬ª –∏ "
                              "—É–¥–∞–ª–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–º–µ—Å—Ç–µ :)</b>",
                              reply_markup=home_markup)
    await state.reset_state()


# —Ö—Ä–∞–Ω–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
@dp.channel_post_handler(content_types=["photo", "file", "media"])
async def message_handler(msg: Message):
    media_id = msg.media_group_id
    deal_id = None
    try:
        deal_id = re.search('id:[0-9]+', msg.caption)
        deal_id = deal_id[0].strip('id:')
        await db.save_message(msg.message_id, str(media_id), deal_id)
        await db.approve_item(deal_id)
        return
    except Exception:
        pass
    await db.save_message(msg.message_id, str(media_id), deal_id)


async def delete_message(deal_id):
    messages_list = await db.get_message_id(deal_id)
    for message_id in messages_list:
        await bot.delete_message(channel, str(message_id).strip('(\',)'))
        await db.delete_message(deal_id)


async def create_media(state: FSMContext, username, call: CallbackQuery = None, msg: Message = None):
    data = await state.get_data()
    item: Item = data.get("item")
    media_id = item.media
    caption = ""
    if call:
        caption = """
üóù <i>id:{id}  |  {brand}</i>
‚ñ™ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
‚ñ´ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}
‚ñ™ –†–∞–∑–º–µ—Ä: {size}
‚ñ´ –¶–µ–Ω–∞: <b>{price}</b>
‚ñ™ –ì–æ—Ä–æ–¥: {city}
‚ñ´ –û—Ç–ø—Ä–∞–≤–∫–∞: {place}
üì≠ –ö–æ–Ω—Ç–∞–∫—Ç—ã: @{username}
‚ûñ‚ûñ‚ûñüî•üî•üî•‚ûñ‚ûñ‚ûñ
""".format(
            id=item.deal_id,
            title=item.title,
            brand=item.brand,
            status=item.status,
            size=item.size,
            city=item.city,
            place=item.place,
            price=item.price,
            username=username
        )
        await item.create()
    elif msg:
        caption = """
üóù <i>id:{id}  |  {brand}</i> 
‚ñ™ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
‚ñ´ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}
‚ñ™ –†–∞–∑–º–µ—Ä: {size}
‚ñ´ –¶–µ–Ω–∞: <b>{price}</b>
‚ñ´ –ì–æ—Ä–æ–¥: {city}
‚ñ™ –û—Ç–ø—Ä–∞–≤–∫–∞: {place}
üì≠ –ö–æ–Ω—Ç–∞–∫—Ç—ã: @{username}
‚ûñ‚ûñ‚ûñüî•üî•üî•‚ûñ‚ûñ‚ûñ
""".format(
            id=item.deal_id,
            title=item.title,
            brand=item.brand,
            status=item.status,
            size=item.size,
            city=item.city,
            place=item.place,
            price=item.price,
            username=username
        )
    # Create media group
    media = types.MediaGroup()

    images_list = await db.get_photo_by_media_id(media_id)
    images_dict = {k: images_list[k] for k in range(0, len(images_list))}

    for key, value in images_dict.items():
        if key == 0:
            media.attach_photo(str(value).strip('(\',)'), caption=caption)
        else:
            media.attach_photo(str(value).strip('(\',)')),

    # Done! Send media group
    return media


# chat_id = msg.from_user.id
# await bot.send_message(chat_id, format_dict(msg))
def format_dict(object):
    return format(object) \
        .replace(",", ",\n") \
        .replace("'", "") \
        .replace(
        "{",
        "{\n") \
        .replace(
        "}", "\n}") \
        .replace("[\n", "") \
        .replace("]", "\n]")
